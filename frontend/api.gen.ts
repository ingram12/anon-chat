/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/challenge/first": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get First Challenge
         * @description Retrieves the initial challenge for user authentication. This challenge must be solved before registration.
         */
        get: operations["GetFirstChallenge"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/challenge/solve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Solve First Challenge
         * @description Submit solution for the first challenge. This step is required before user registration.
         */
        post: operations["SolveFirstChallenge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register New User
         * @description Register a new user in the system. Requires successful completion of the first challenge.
         */
        post: operations["RegisterUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Response containing the first challenge details */
        GetFirstChallengeResponse: {
            /** @description The challenge string that needs to be solved */
            challenge: string;
            /** @description Temporary token for challenge verification */
            token: string;
            /** @description Temporary user ID for the challenge session */
            userId: string;
            /**
             * Format: int32
             * @description Difficulty level of the challenge
             */
            difficulty: number;
        };
        /** @description Request to solve the first challenge */
        SolveFirstChallengeRequest: {
            /** @description Temporary user ID received from the challenge */
            userId: string;
            /** @description The challenge string that was received */
            challenge: string;
            /** @description The solution to the challenge */
            solution: string;
            /** @description Temporary token received from the challenge */
            token: string;
            /**
             * Format: int32
             * @description Difficulty level of the challenge
             */
            difficulty: number;
        };
        /** @description Response after successful challenge solution */
        SolveFirstChallengeResponse: {
            /** @description Verified user ID for registration */
            userId: string;
            /** @description The solved challenge string */
            challenge: string;
            /**
             * Format: int32
             * @description Difficulty level of the solved challenge
             */
            difficulty: number;
        };
        /** @description Request to register a new user */
        RegisterUserRequest: {
            /** @description Verified user ID from challenge solution */
            userId: string;
            /** @description The solved challenge string */
            challenge: string;
            /** @description The solution to the challenge */
            solution: string;
            /** @description User's chosen display name */
            nickname: string;
            tags: string[];
            /** @description User's public key for secure communication */
            publicKey: string;
            /**
             * Format: int32
             * @description Difficulty level of the solved challenge
             */
            difficulty: number;
        };
        /** @description Response after user registration attempt */
        RegisterUserResponse: {
            /** @description Registered user ID */
            userId: string;
            /** @description Whether the registration was successful */
            success: boolean;
            /** @description Additional information about the registration result */
            message: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetFirstChallenge: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response containing the challenge details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFirstChallengeResponse"];
                };
            };
        };
    };
    SolveFirstChallenge: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SolveFirstChallengeRequest"];
            };
        };
        responses: {
            /** @description Successful challenge solution verification */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SolveFirstChallengeResponse"];
                };
            };
        };
    };
    RegisterUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterUserRequest"];
            };
        };
        responses: {
            /** @description User registration result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterUserResponse"];
                };
            };
        };
    };
}
