// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "users.proto" (package "users", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message users.GetFirstChallengeRequest
 */
export interface GetFirstChallengeRequest {
}
/**
 * @generated from protobuf message users.GetFirstChallengeResponse
 */
export interface GetFirstChallengeResponse {
    /**
     * @generated from protobuf field: string challenge = 1;
     */
    challenge: string;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
    /**
     * @generated from protobuf field: string userId = 3;
     */
    userId: string;
    /**
     * @generated from protobuf field: int32 difficulty = 4;
     */
    difficulty: number;
}
/**
 * @generated from protobuf message users.SolveFirstChallengeRequest
 */
export interface SolveFirstChallengeRequest {
    /**
     * @generated from protobuf field: string userId = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string challenge = 2;
     */
    challenge: string;
    /**
     * @generated from protobuf field: string solution = 3;
     */
    solution: string;
    /**
     * @generated from protobuf field: string token = 4;
     */
    token: string;
    /**
     * @generated from protobuf field: int32 difficulty = 5;
     */
    difficulty: number;
}
/**
 * @generated from protobuf message users.SolveFirstChallengeResponse
 */
export interface SolveFirstChallengeResponse {
    /**
     * @generated from protobuf field: string userId = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string challenge = 2;
     */
    challenge: string;
    /**
     * @generated from protobuf field: int32 difficulty = 3;
     */
    difficulty: number;
}
/**
 * @generated from protobuf message users.RegisterUserRequest
 */
export interface RegisterUserRequest {
    /**
     * @generated from protobuf field: string userId = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string challenge = 2;
     */
    challenge: string;
    /**
     * @generated from protobuf field: string solution = 3;
     */
    solution: string;
    /**
     * @generated from protobuf field: string nickname = 4;
     */
    nickname: string;
    /**
     * @generated from protobuf field: repeated string tags = 5;
     */
    tags: string[];
    /**
     * @generated from protobuf field: string publicKey = 6;
     */
    publicKey: string;
    /**
     * @generated from protobuf field: int32 difficulty = 7;
     */
    difficulty: number;
}
/**
 * @generated from protobuf message users.RegisterUserResponse
 */
export interface RegisterUserResponse {
    /**
     * @generated from protobuf field: string userId = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: bool success = 2;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string message = 3;
     */
    message: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetFirstChallengeRequest$Type extends MessageType<GetFirstChallengeRequest> {
    constructor() {
        super("users.GetFirstChallengeRequest", []);
    }
    create(value?: PartialMessage<GetFirstChallengeRequest>): GetFirstChallengeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetFirstChallengeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFirstChallengeRequest): GetFirstChallengeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFirstChallengeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.GetFirstChallengeRequest
 */
export const GetFirstChallengeRequest = new GetFirstChallengeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFirstChallengeResponse$Type extends MessageType<GetFirstChallengeResponse> {
    constructor() {
        super("users.GetFirstChallengeResponse", [
            { no: 1, name: "challenge", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "difficulty", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetFirstChallengeResponse>): GetFirstChallengeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.challenge = "";
        message.token = "";
        message.userId = "";
        message.difficulty = 0;
        if (value !== undefined)
            reflectionMergePartial<GetFirstChallengeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFirstChallengeResponse): GetFirstChallengeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string challenge */ 1:
                    message.challenge = reader.string();
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                case /* string userId */ 3:
                    message.userId = reader.string();
                    break;
                case /* int32 difficulty */ 4:
                    message.difficulty = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFirstChallengeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string challenge = 1; */
        if (message.challenge !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.challenge);
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        /* string userId = 3; */
        if (message.userId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.userId);
        /* int32 difficulty = 4; */
        if (message.difficulty !== 0)
            writer.tag(4, WireType.Varint).int32(message.difficulty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.GetFirstChallengeResponse
 */
export const GetFirstChallengeResponse = new GetFirstChallengeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SolveFirstChallengeRequest$Type extends MessageType<SolveFirstChallengeRequest> {
    constructor() {
        super("users.SolveFirstChallengeRequest", [
            { no: 1, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "challenge", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "solution", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "difficulty", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SolveFirstChallengeRequest>): SolveFirstChallengeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.challenge = "";
        message.solution = "";
        message.token = "";
        message.difficulty = 0;
        if (value !== undefined)
            reflectionMergePartial<SolveFirstChallengeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SolveFirstChallengeRequest): SolveFirstChallengeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userId */ 1:
                    message.userId = reader.string();
                    break;
                case /* string challenge */ 2:
                    message.challenge = reader.string();
                    break;
                case /* string solution */ 3:
                    message.solution = reader.string();
                    break;
                case /* string token */ 4:
                    message.token = reader.string();
                    break;
                case /* int32 difficulty */ 5:
                    message.difficulty = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SolveFirstChallengeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userId = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string challenge = 2; */
        if (message.challenge !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.challenge);
        /* string solution = 3; */
        if (message.solution !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.solution);
        /* string token = 4; */
        if (message.token !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.token);
        /* int32 difficulty = 5; */
        if (message.difficulty !== 0)
            writer.tag(5, WireType.Varint).int32(message.difficulty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.SolveFirstChallengeRequest
 */
export const SolveFirstChallengeRequest = new SolveFirstChallengeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SolveFirstChallengeResponse$Type extends MessageType<SolveFirstChallengeResponse> {
    constructor() {
        super("users.SolveFirstChallengeResponse", [
            { no: 1, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "challenge", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "difficulty", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SolveFirstChallengeResponse>): SolveFirstChallengeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.challenge = "";
        message.difficulty = 0;
        if (value !== undefined)
            reflectionMergePartial<SolveFirstChallengeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SolveFirstChallengeResponse): SolveFirstChallengeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userId */ 1:
                    message.userId = reader.string();
                    break;
                case /* string challenge */ 2:
                    message.challenge = reader.string();
                    break;
                case /* int32 difficulty */ 3:
                    message.difficulty = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SolveFirstChallengeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userId = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string challenge = 2; */
        if (message.challenge !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.challenge);
        /* int32 difficulty = 3; */
        if (message.difficulty !== 0)
            writer.tag(3, WireType.Varint).int32(message.difficulty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.SolveFirstChallengeResponse
 */
export const SolveFirstChallengeResponse = new SolveFirstChallengeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterUserRequest$Type extends MessageType<RegisterUserRequest> {
    constructor() {
        super("users.RegisterUserRequest", [
            { no: 1, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "challenge", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "solution", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "publicKey", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "difficulty", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterUserRequest>): RegisterUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.challenge = "";
        message.solution = "";
        message.nickname = "";
        message.tags = [];
        message.publicKey = "";
        message.difficulty = 0;
        if (value !== undefined)
            reflectionMergePartial<RegisterUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterUserRequest): RegisterUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userId */ 1:
                    message.userId = reader.string();
                    break;
                case /* string challenge */ 2:
                    message.challenge = reader.string();
                    break;
                case /* string solution */ 3:
                    message.solution = reader.string();
                    break;
                case /* string nickname */ 4:
                    message.nickname = reader.string();
                    break;
                case /* repeated string tags */ 5:
                    message.tags.push(reader.string());
                    break;
                case /* string publicKey */ 6:
                    message.publicKey = reader.string();
                    break;
                case /* int32 difficulty */ 7:
                    message.difficulty = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userId = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string challenge = 2; */
        if (message.challenge !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.challenge);
        /* string solution = 3; */
        if (message.solution !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.solution);
        /* string nickname = 4; */
        if (message.nickname !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.nickname);
        /* repeated string tags = 5; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.tags[i]);
        /* string publicKey = 6; */
        if (message.publicKey !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.publicKey);
        /* int32 difficulty = 7; */
        if (message.difficulty !== 0)
            writer.tag(7, WireType.Varint).int32(message.difficulty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.RegisterUserRequest
 */
export const RegisterUserRequest = new RegisterUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterUserResponse$Type extends MessageType<RegisterUserResponse> {
    constructor() {
        super("users.RegisterUserResponse", [
            { no: 1, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterUserResponse>): RegisterUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.success = false;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<RegisterUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterUserResponse): RegisterUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userId */ 1:
                    message.userId = reader.string();
                    break;
                case /* bool success */ 2:
                    message.success = reader.bool();
                    break;
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userId = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* bool success = 2; */
        if (message.success !== false)
            writer.tag(2, WireType.Varint).bool(message.success);
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.RegisterUserResponse
 */
export const RegisterUserResponse = new RegisterUserResponse$Type();
/**
 * @generated ServiceType for protobuf service users.UserService
 */
export const UserService = new ServiceType("users.UserService", [
    { name: "GetFirstChallenge", options: {}, I: GetFirstChallengeRequest, O: GetFirstChallengeResponse },
    { name: "SolveFirstChallenge", options: {}, I: SolveFirstChallengeRequest, O: SolveFirstChallengeResponse },
    { name: "RegisterUser", options: {}, I: RegisterUserRequest, O: RegisterUserResponse }
]);
