// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "users.proto" (package "users", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserService } from "./users";
import type { RegisterUserResponse } from "./users";
import type { RegisterUserRequest } from "./users";
import type { SolveFirstChallengeResponse } from "./users";
import type { SolveFirstChallengeRequest } from "./users";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetFirstChallengeResponse } from "./users";
import type { GetFirstChallengeRequest } from "./users";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service users.UserService
 */
export interface IUserServiceClient {
    /**
     * @generated from protobuf rpc: GetFirstChallenge(users.GetFirstChallengeRequest) returns (users.GetFirstChallengeResponse);
     */
    getFirstChallenge(input: GetFirstChallengeRequest, options?: RpcOptions): UnaryCall<GetFirstChallengeRequest, GetFirstChallengeResponse>;
    /**
     * @generated from protobuf rpc: SolveFirstChallenge(users.SolveFirstChallengeRequest) returns (users.SolveFirstChallengeResponse);
     */
    solveFirstChallenge(input: SolveFirstChallengeRequest, options?: RpcOptions): UnaryCall<SolveFirstChallengeRequest, SolveFirstChallengeResponse>;
    /**
     * @generated from protobuf rpc: RegisterUser(users.RegisterUserRequest) returns (users.RegisterUserResponse);
     */
    registerUser(input: RegisterUserRequest, options?: RpcOptions): UnaryCall<RegisterUserRequest, RegisterUserResponse>;
}
/**
 * @generated from protobuf service users.UserService
 */
export class UserServiceClient implements IUserServiceClient, ServiceInfo {
    typeName = UserService.typeName;
    methods = UserService.methods;
    options = UserService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetFirstChallenge(users.GetFirstChallengeRequest) returns (users.GetFirstChallengeResponse);
     */
    getFirstChallenge(input: GetFirstChallengeRequest, options?: RpcOptions): UnaryCall<GetFirstChallengeRequest, GetFirstChallengeResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetFirstChallengeRequest, GetFirstChallengeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SolveFirstChallenge(users.SolveFirstChallengeRequest) returns (users.SolveFirstChallengeResponse);
     */
    solveFirstChallenge(input: SolveFirstChallengeRequest, options?: RpcOptions): UnaryCall<SolveFirstChallengeRequest, SolveFirstChallengeResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SolveFirstChallengeRequest, SolveFirstChallengeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RegisterUser(users.RegisterUserRequest) returns (users.RegisterUserResponse);
     */
    registerUser(input: RegisterUserRequest, options?: RpcOptions): UnaryCall<RegisterUserRequest, RegisterUserResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterUserRequest, RegisterUserResponse>("unary", this._transport, method, opt, input);
    }
}
