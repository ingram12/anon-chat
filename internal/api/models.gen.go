// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"time"
)

// Defines values for UpdateChatResponseStatus.
const (
	Active UpdateChatResponseStatus = "active"
	Closed UpdateChatResponseStatus = "closed"
)

// Defines values for WaitForChatResponseStatus.
const (
	Assigned WaitForChatResponseStatus = "assigned"
	Waiting  WaitForChatResponseStatus = "waiting"
)

// ChatMessage Chat message object
type ChatMessage struct {
	// Message Content of the chat message
	Message string `json:"message"`

	// Timestamp Timestamp of when the message was sent
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// GetFirstChallengeResponse Response containing the first challenge details
type GetFirstChallengeResponse struct {
	// Challenge The challenge string that needs to be solved
	Challenge string `json:"challenge"`

	// Difficulty Difficulty level of the challenge
	Difficulty int32  `json:"difficulty"`
	Token      string `json:"token"`
}

// QuitChatResponse Response after quitting a chat
type QuitChatResponse struct {
	// Success Whether the chat was successfully quit
	Success bool `json:"success"`
}

// RegisterUserRequest Request to register a new user
type RegisterUserRequest struct {
	Challenge string `json:"challenge"`

	// Difficulty Difficulty level of the solved challenge
	Difficulty int32 `json:"difficulty"`

	// Nickname User's chosen display name
	Nickname string `json:"nickname"`

	// Nonce The solution to the challenge
	Nonce string `json:"nonce"`

	// PublicKey User's public key for secure communication
	PublicKey string   `json:"publicKey"`
	Tags      []string `json:"tags"`

	// UserId Verified user ID from challenge solution
	UserId string `json:"userId"`
}

// RegisterUserResponse Response after user registration attempt
type RegisterUserResponse struct {
	// Message Additional information about the registration result
	Message string `json:"message"`

	// Success Whether the registration was successful
	Success bool `json:"success"`

	// UserId Registered user ID
	UserId string `json:"userId"`
}

// SendChatMessageRequest Request to send a new chat message
type SendChatMessageRequest struct {
	// Message The encrypted message content
	Message string `json:"message"`
}

// SendChatMessageResponse Response after sending a chat message
type SendChatMessageResponse struct {
	// Success Whether the message was sent successfully
	Success bool `json:"success"`

	// Timestamp Server timestamp when the message was received
	Timestamp time.Time `json:"timestamp"`
}

// SolveFirstChallengeRequest Request to solve the first challenge
type SolveFirstChallengeRequest struct {
	// Challenge The challenge string that was received
	Challenge string `json:"challenge"`

	// Difficulty Difficulty level of the challenge
	Difficulty int32 `json:"difficulty"`

	// Nonce The solution to the challenge
	Nonce string `json:"nonce"`
	Token string `json:"token"`
}

// SolveFirstChallengeResponse Response after successful challenge solution
type SolveFirstChallengeResponse struct {
	// Challenge The challenge string that was received
	Challenge string `json:"challenge"`

	// Difficulty Difficulty level of the challenge
	Difficulty int32  `json:"difficulty"`
	UserId     string `json:"userId"`
}

// UpdateChatResponse Response containing chat updates
type UpdateChatResponse struct {
	Messages []ChatMessage `json:"messages"`

	// Status Status of the chat
	Status UpdateChatResponseStatus `json:"status"`
}

// UpdateChatResponseStatus Status of the chat
type UpdateChatResponseStatus string

// WaitForChatResponse Response indicating chat assignment
type WaitForChatResponse struct {
	// Nickname Nickname of the assigned chat peer
	Nickname *string `json:"nickname"`

	// PeerPublicKey Public key of the assigned chat peer
	PeerPublicKey *string `json:"peerPublicKey"`

	// Status Status of the chat assignment
	Status WaitForChatResponseStatus `json:"status"`
}

// WaitForChatResponseStatus Status of the chat assignment
type WaitForChatResponseStatus string

// SolveFirstChallengeJSONRequestBody defines body for SolveFirstChallenge for application/json ContentType.
type SolveFirstChallengeJSONRequestBody = SolveFirstChallengeRequest

// SendChatMessageJSONRequestBody defines body for SendChatMessage for application/json ContentType.
type SendChatMessageJSONRequestBody = SendChatMessageRequest

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterUserRequest
