// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXTY/jNgz9K4JaoJc0SXduuU130WJQoFhkdttD0YNi07F2LMkr0hkYi/z3QlQc27Hy",
	"McVsi705Mf1E8j2S4heZOVM7C5ZQrr5IzEowih9/BfpFe6S3paoqsFtYA9bOIoSXOWDmdU3aWbmS3RuR",
	"OUtKW223gkoQRfheZB2AyIGUrlDOZO1dDZ408FFHiyn0hxIGAEg+YisSFiBHQU5sQKCrdpDLmaS2BrmS",
	"0U7uZzLXRaGzpqJ2iv3u+E5UsINKuILd7t2ZycJ5o0iupLZ096Y/QVuCLfhwBLknsAnPwdTOK98KNhCF",
	"84NIduB1oTPFxgm/GwT/kF9CDRbi4R3j0jhLgJiE3c+kh8+N9pDL1V9yGGcM4njuKHF/H4Hc5hNkFPxb",
	"w1Yjgf+I4NfwuQGklC74RSDJH+yFEhae2fmXyiCSPFHDa7F+Cn8b+VZnT1aZhMshMz+gyEqHYEWusa5U",
	"K9g24XHdbCqd/QbtWaBoIZ6gZcoRssaHijOmsReEhK5qItCZnPLbQNGp9CdQpLbMkyYweNbPkBzPrAfz",
	"FEz8Q3mv2ktS/4NLBPJe6d6ZIf1dZNd0ftT0MLrB10cOhzSMRHSI/XohXO2QqghFwBHFkvDMnFBEYGqa",
	"1IQBRJWqiPs81+FRVULbKFTG2biGmMoRvAdsKkrqo8kywASdf5ZAJfgp1rNCcfiqaKoec+NcBcpeorRL",
	"Vk/q7eR1js6OOUnR8Riq+HRuXW9PXPypmfU6syqkzEMG+v+bUq/ZB24beF3AsW6vot4+8V4E/MJe0M3B",
	"K+MvKbMbi7+vnXQz+/aH4u0d3Y3b4L+j7yJXASE0yEQHff/ADijrbGtcE2a1IqHqujrMU/GsqeyD/3Gj",
	"EHKhGirB0mDmaqrCkffWWfE2YNy/f5AzuQOP8aif5sv5MmTG1WBVreVK3s2X87vAtqKSiV4cz1lwDwr/",
	"bSHZtshr2AEyQ9pq0moopRATJ3js6Fx8KDUO7EyD1F+exQYK58etfi7Z4/gjEDpdCmTgJ8qbo3izXLJq",
	"nSWw7Pwgn4tPGBtQXDPC0/ceCrmS3y36PWRxWEIW5zcQZnWclce+qvyZdWS6iOx5ABqjfBuDE3yg6MML",
	"FgNmOFfB79qlJspjszGa+m7a3c1PhsqBCiSohQ6TIQq8o2ByO5jykOg/MlYKIP3s8vbVSLgwUPfj6iTf",
	"wP4ryuFSz70siGmbHe9fYxnwOWkhBGZw0e0y53Wwnm47QtvYUVskMHOxjnnD0Thwpq6A/Tv031PhTIQw",
	"vH5+JQWkVr3/mPrkJTvB+cfJvfpw8R0zfKTnd3gWnLn9fr//JwAA///sBLs1DBEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
