// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXzW7jNhB+lQFboBfXdjc339JdtAgKFAtntz0UPdDSyOJGIrWcoQNhoXcvSMqWZNGO",
	"CyRFb4pFfRx+P8PJN5GZujEaNZPYfBOUlVjL8Pgr8i/KEr8vZVWh3uMWqTGa0L/MkTKrGlZGi404voHM",
	"aJZKK70HLhEK/z1kRwDIkaWqSCxEY02DlhWGrU4r5tCfShwBENuILRk0Yk7ABnYIZKoD5mIhuG1QbERc",
	"J7qFyFVRqMxV3M6xP5zeQYUHrMAUoeyhnIUojK0li41Qmu/eDTsozbhH67d4woB9tnW3EBa/OmUxF5u/",
	"xBhzVFP8+u8TrNl9wYw96hb3ihjtZ0K7xa8OiVPEhxeeBduvBwkan8ER2n/Lc2RxRvdr0XoOfxu7WmVP",
	"WtaJkj0zPxBkpSHUkCtqKtlCWJuouHG7SmW/YXsRKK6AJ2yhMBYIM2e9pevaaZXJsDgBTKZyEegCp+Gt",
	"l+jcWzMolvugk2Ks6WKdnhwbVPfLUzDxB2mtbP3f3gsP+RzvD7SqUJgHs8DDByisqcfyH0+2eMHc/QaL",
	"ictHX580HMtwloNwmJeD8GILkoUPQThRjIQNyoFkxrrhWSZqJJKpRNznufKPsgKlo1EDzs44DlJO4C2S",
	"qzjpD5dlSAk5/yyRS7RzrGdJ0H9VuGrA3BlTodTXJD2SNYh6u3jHQhcnTlJyPPoUn18ML7enEP7UpfA6",
	"l4GnzGKG6v92Dbxif7hyo4yydtPlkhTxxmgNzky3iqmag1FvcuG8WL/Q5y8R0I8PoVFLbXRbG+evAskg",
	"m6bq2zU8Ky6HKn/cScIcpOMSNY9auuLKb3mvjYb3HuP+44NYiANailv9tFwv154406CWjRIbcbdcL+/8",
	"cSWX4aSr0z6rYHH/2x6TqWCr8IAUBFdasZJjLv2ZQninhS7hU6lotK52xMPwAzssjJ12kqUIFcc/vArz",
	"oU54GaK+4RTv1usQQqMZdSh+xOfqC0UfxzHRP31vsRAb8d1qmCNX/RC5ujxBBlWnrDwOtrIXxsn5INmF",
	"/lrX0rbxcBA2hOF4fsVImcCVr7sxqYb16Ha14iGUXopEz+qlIMYGlG880cdHCWaXz1yHRABFDAQS/2zy",
	"9tVEuNKvu2kI2Trs3tAO15rOdUPM+wwcwuzSR3hqg7BP2gheGVodR+XLPtjOh2lQOk6xLTHWS9hG3mjS",
	"D03dVBjq6++Qc+PMjDCebt7IAan/JP5j6ZMzXELzz7OxrZ+rpgqf5PkdnyEw13Vd908AAAD//1aqWYLM",
	"DgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
