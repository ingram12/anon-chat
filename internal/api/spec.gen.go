// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
