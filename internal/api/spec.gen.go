// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXX2/bRgz/KsRtwF4822ve/Ja12BAMGAqn3R6GPZwlyrpGulOPlAOh0HcfeJItyTon",
	"3uCub1ZEkbzfHx7zRSWurJxFy6Q2XxQlOZY6/PwV+Rfjid/muijQ7nGLVDlLKC9TpMSbio2zaqOObyBx",
	"lrWxxu6Bc4RMvofkmABSZG0KUgtVeVehZ4Oh1ClinvpDjqMExL7LrRksYkrADnYI5IoDpmqhuKlQbVQX",
	"p9qFSk2WmaQuuJnnfnd6BwUesACXhbaHdhYqc77UrDbKWL57M1QwlnGPXkqwe0Ir2c+Ktwvl8XNtPKZq",
	"85caZx11dfz+71Nqt/uECUvmLe4NMfqPhH6Ln2skjoEfXggSvo8HDRafoSb0/xbrDskZ5LeC9jz9dQhb",
	"kzxZXUZaFmR+IEhyR2ghNVQVuoEQG+nYOptcPnctjwLjuQZmeap6V5jkN2wuNtRFwBM2kDkPhEntxR5l",
	"WVuT6BAcScx6H0gyjCVdTC7I+EC5hMfSdH/Q3utGnkUID+k83x/oTWYwDUqBh3eQeVeOue9Bmdc403Zf",
	"YDEReYf2iL0xcOcekJO8boFXB5DORP7hOJ0ZfMAaNDOWFc/cUCKRjnnhPk2N/NQFGNtJNOTZuZqDQCbp",
	"PVJdcIwKqpMEKcLlnzlyjn6e61kT9F9ldTHk3DlXoLYv8XkEa2D0euaOjS5OmMToeBT/nl8Lrw+mYPvY",
	"lXCbq0Ag85ig+XaXwK1Gy3+4TI4+u/JSiVJ4pbEGXcanxJTLQaZXaXDerASK+yL2fP8QBqu2zjalq+UK",
	"0Ay6qop+vMKz4Xzo8sedJkxB15yj5dEINlxIyXvrLLyVHPfvH9RCHdBTV+qn5Xq5FuBchVZXRm3U3XK9",
	"vJPjas7DSVenOqsgcPnbHqOeYG/wgBSUYKxho8dYypmCdaeNLuFDbmgUV9bEw+IDO8ycn86RpQoddw/C",
	"wnyhU0JDx284xZv1OljQWUYbmh/hufpEzg4rovz63mOmNuq71bBDrvoFcnV5ewysTlF5HGTlL6yS8yWy",
	"DdO1LLVvusNBKAjD8SRixEzASvquXGxcPda70vDgVqEiMrF6KoixAiNjp9PxkYLZ1TPnIWJA1RkCiX92",
	"aXMzEl6Y1u3UhOxrbL+iHF4aOi8LYj5n4BDWlt7CUxmEOnEhCDO0Oq7Il3WwnS/RYGy3vTbEWC5h2+FG",
	"k3noyqrA0F9/g5wLZyaE8W7zlRQQ+w/if6Y+usFFOP84W9r6rWrK8Ime3/EZAnJt27b/BAAA//8lBto3",
	"yA4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
