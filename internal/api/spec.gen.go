// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RY32/bNhD+VwhuwF40Oz+2YtFb16JDsKEI0nZ9KPpASyeLjUiq5MmpEfh/H46ULMmi",
	"7WRwCgx7syz67njfd/fd+YFnRtVGg0bH0wfushKU8B//AHwjrcNXpagq0Eu4BVcb7YBe5uAyK2uURvOU",
	"d29YZjQKqaVeMiyBFfR7lnUGWA4oZOV4wmtrarAowbvanpiafl/CwIBDG2wLZBogdwwNWwBzplpBzhOu",
	"xLe/QC+x5OmLXxKupB4+4roGnvJghW8SnsuikFlT4Xrq+fX2HatgBRUzhb9UH2zCC2OVQJ5yqfHyIviX",
	"qlE8vbq6uvL+w+P51rnUCEuw5B3NHWhyvD/q80nQm4Rb+NpICzlPP/FhNIPbdMY/b39vFl8gQ3J7C0vp",
	"EOwHB/YWvjbgMAapf0H5te15JpiGe9Y4sIcRHFzn8sXoOvR4EhAC4CfEQsvsTgsVYSCl6SfHstI40CyX",
	"rq7EmvmzI76dX/x2BLqEa6OzPSR3pmrokTK+S7On8CPhdbOoZPYnrPfeJZxgd7BmhbHMQdZYKl6lGi0z",
	"4Q+PvP56fnHULYqlp4JEUG6va0q59cSi409OoBLfroP987Pta2GtWNNbouZ1PvX9N1hZSMg9d9n1a1ZY",
	"o4Ztpc39E1O9U4qt92RUkwHxAb+G+OyWLKXkeMUe7cKioGr1dw21az2kTCCCqnFSvAqcE7Hm+zLPJX0U",
	"FZM61Je3szANepKOzFtwTYUR4kxQdE2WgYuQ5GMJWIKd2r4XjrW/KpqKb20ujKlA6EPgd8nr4T8RzN0t",
	"km0CY9i9o061K6THm65vcDERPY14Uj4tZCD/g7L5XZroqbW56wOP1Ogoax5Z+H2dxFvc/5w+fZ/4F+18",
	"EHoMto9C4htjX5UCHwGX1LlXW72k6yETzsmlVqCnLXr/ePK2fdMlKhgJsxGyGvywdlhldVNVYlEBT9E2",
	"EJsoAOzN/qniph8nHhlEZJ44GoRDgU1EM9757wc82UkkaKLCJ97FxBN+LyRlfQDhHg60PnczMJDzKQvI",
	"BqllRE5vrv28JbTRa2Ua10Zb11U7dbF7iWXP9Z8XwkHORIMlaOwnM5RIieIvtdGMyMZe3lzzhK/AuuDq",
	"fHY2O6OsmRq0qCVP+eXsbHZJVxFY+jTOt37mXmPouyVEZQmthBU4n2GpJUox7C10Jy+t40Bn7H0p3eCc",
	"ahz22xpbQGHsWOdn3EccHqhIp1soJ4RCAflbXJyd+TZmNBLe6QMf5HP+xRnd77X06UcLBU/5D/N+8Z23",
	"W+98/8rrUd3hXd9m7Z79d7r5bvz0o5Sw63A55h2y/np0YoCMzxXFXZvYxPCuWSiJve4RFJGhoYXCIdRM",
	"UusOFO8gmIyKUxwigsRDrYDD302+PhkIBwamzbg+qVFsnpEOh0T4MCGmustWfgdpS3hMA+8nTgRCxs27",
	"DXw/D26nOzqTOqzKa4egZuw25M2N5gOj6gp8fG3/3CXOhAjDXeSZGBD7g+I7Qx/duCKYf5gsWe0WNEZ4",
	"C89buGc+cwN0SY2oic8fwsix2duIabwIChKUI/z5tRXbduglK23Bg85rIzVS0TcuHMlKyO6YLDoj0jGx",
	"EtKL7xTuwUTjtcMKBQjW8fRTbFy8ft0RyVOwFdpBzJzEkadehUhH/UzTz1pjhJMBWk/6U2nz+Rm5ERvy",
	"HqkPBya+MWG2SPvEbzabzT8BAAD//4RU4tiqFQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
