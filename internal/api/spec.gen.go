// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXTW/jNhD9KwO2QC+qP5K2aHxLd9EiaFEsnN32UPRASyOLG5HUkiNnhYX/ezGUrA9L",
	"jpNtNkDRm2lS8zjz3sxwPonY6sIaNOTF6pPwcYZahp+/IP2snKdXmcxzNFtcoy+s8cibCfrYqYKUNWIl",
	"DjsQW0NSGWW2QBlCyt9DfDAACZJUuReRKJwt0JHCANWeGJt+m2HPgCdX25YEBjHxQBY2CN7mO0xEJLT8",
	"+BuaLWVi9cN3kdDK9JdUFShWorYi9pFIVJqquMypGiO/bvcgxx3mYNPgVHfZSKTWaUliJZShy4saX+lS",
	"i9XV1dVVwK+XyxZcGcItOkYne4eGgU/fejm69D4SDj+UymEiVn+J/m163hyM/91+bzfvMSaGXeNWeUL3",
	"zqNb44cSPU1RGjY4vq45DxIM3kPp0T2VwZqfEZEvQ9gx+L/mzaj4zkg94SuH9BsPcWY9GkiUL3JZQTg7",
	"cHV58eMZmiNhrIlPh7PkJbNzLMmnaCkSRbnJVfwrVid9qU/AHVaQWgce49JxomtdGhXLcHiA+v3y4iws",
	"yW2QjSLU/iQ0h9wFEfLxJwdQy483tf3lot2WzsmKd1nGN8kY+w90KlWYBJ3DzWtIndV95Taxf2Koj9K2",
	"QY8G+Vsz3tNXn5/j9OaQnM/usxVbppzZwdc6z12gFCQR6oJGia7RezmV5tdJovinzEGZOr+CnY0tKYh0",
	"YN6hL3OaEM6IRV/GMfoJkfyZIWXoxrbvpYfmq7TMRWtzY22O0jxE/iF4Hf3PRPPBi6gN4BR3t1ypjpvu",
	"+QIdCtxUw32eRsvxdBij+g+22Bcpos/dxw914JH9fFI1j0z8Lk+mS9z/XD6fxWy/vHxGF3gU62yJy+xE",
	"HX5zExq1NNZU2pb8GpEEsijypl3DvaKsC9K3G+kxAVlShoa6lk6Kcoa8NtbAK7Zx/eZGRGKHztdQy9li",
	"tmB/bYFGFkqsxOVsMbtk3UjKgmTmLc48FCf+b4uT9Yycwh36QKEyipTsi5J9CjV5eNEZvM2U753Tpadu",
	"JIANptYNG8RMhBvXC6ZpPOoI5qlOlODFxWIR9G8NoQmX78Vz/t5b0w1P/Otrh6lYia/m3XQ1b0ar+em5",
	"KrA6jMptl5/uxJA1Hq/2oW1qLV1VOwcBEDr3+ESPmRArvndhp1rNbbnRirqCyVRMdJuGCk9YgOKcr4V+",
	"oGD0xhjzMFHJRJ0x6Oknm1TPRsIDnXY/zFJyJe6/oBweqt4PC2JcsGEXHq9NCg9lEHCmhcDM+PlhzDut",
	"g/V4EARl6hmr8oR6Bus6bn7QWKwucgz3awr0sXBGQug/Yr+QAqam4BemfvKpPsH5u9HrvHk+Dxlu6fkd",
	"7yFEbr/f7/8JAAD//1ueeP7iEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
