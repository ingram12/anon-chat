// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RX34/bNgz+VwhtwF68/Ljbil3ebi02BBuGItduD8MeFJuO1bMkV6JzNYr87wNlJ7Zj",
	"J+kNaYGhb1EkkyK/jx/FjyK2urAGDXmx+Ch8nKGW4eevSL8o5+llJvMczQZX6AtrPPJmgj52qiBljViI",
	"/Q7E1pBURpkNUIaQ8vcQ7w1AgiRV7kUkCmcLdKQwuDqcGJp+k2HHgCdX25YEBjHxQBbWCN7mW0xEJLT8",
	"8DuaDWVi8eKHSGhlukuqChQLUVsRu0gkKk1VXOZUDT2/OuxBjlvMwaYhqPaykUit05LEQihDtze1f6VL",
	"LRZ3d3d3wX+9nB+cK0O4QcfeyT6iYcenbz0fXHoXCYfvS+UwEYu/Rfc2nWj2xv85fG/X7zAmdrvCjfKE",
	"7q1Ht8L3JXoagzRscH5dcx4kGHyC0qM7j2AnnNsXvXB4eRUQasCviIVR8aOReoSBnKbvPMSZ9WggUb7I",
	"ZQXhbI9v85ufLkAXCWNNfILk3uYlLznjxzR7Dj8iUZTrXMW/YXUylvoEPGIFqXXgMS4dF6/WpVGxDId7",
	"Xn+c31x0S3ITqKAItT/pmlPuArH4+LMTqOWHZW1/PjtsS+dkxbtMzWUy9P0nOpUqTAJ3YfkKUmd1V1aa",
	"3D8z1Uel2HiPejVZI97hVxef45LllFyu2IsqLFOu1hBrXbsuQAqSCHVBg+LV6L0cE9/7JFH8U+agTF1f",
	"wc7alhRI2jPv0Jc5jRBngKIv4xj9CEn+ypAydEPbT9JD81Va5uJgc21tjtKcA3+fvBb+K8G8jyI6JHAM",
	"uwdWquNGell0g8CNNdHrNE/Op8MY1f+wbX4REb12b97rwCf26FHWfGLht3UyLnFfOX1anfgPct65+hA2",
	"tsA6OSKkr5eh00pjTaVtyc8JSSCLIm/6LTwpytoov19LjwnIkjI01PZkUpSzy3tjDbxkG/evlyISW3S+",
	"djWfzCYzjtMWaGShxELcTmaTWwZeUhYwnx78TIO68H8bHBUkcgq36AMGyihSsssqjimIav+iE3iTKd85",
	"p0tP7Tsd1pha11f4iQg3rhcMz3D+EIxPzfQQxc1sFghsDaEJl+/kc/rOW9NONPzrW4epWIhvpu3IM23m",
	"nenpYSeg2s/KQ1tg7sTkM5x5dqHvaS1dVQcHwSG04fGJDjIhV3zvwo71iodyrRW1isdQjLSLBgpPWIDi",
	"oq0Jvodg8EgY4jAiRaKuFPT0s02qq4FwplXu+tVJrsTdZ6TDOfk9T4ih4sI2vD6bEu7TIPgZJwIj46f7",
	"2es0D1bD6QyUqYekyhPqCazqvPleZ7C6yDHcr1HYY+IMiNB9hX4mBoyNpl8Y+tG39gjmbwfP6+b920f4",
	"AM8f+AQhc7vdbvdvAAAA//92zWcsdxEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
