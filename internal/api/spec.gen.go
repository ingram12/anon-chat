// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXTW/jNhP+KwO+L9CL6o+kLVrf0l20CFoUC2e3PRQ90NLI4kYkteTIqbDwfy+Gki3J",
	"ouMEzQaoT6JFzdfzPDPkZ5FaXVmDhrxYfRY+LVDL8Pgz0k/KeXpTyLJEs8U1+soaj/wyQ586VZGyRqzE",
	"4Q2k1pBURpktUIGQ8/eQHgxAhiRV6UUiKmcrdKQwuDrumJp+X+DAgCfX2pYEBjHzQBY2CN6WO8xEIrT8",
	"+1c0WyrE6rtvEqGVGS6pqVCsRGtF7BORqTxXaV1SM/X89vgOStxhCTYPSfXBJiK3TksSK6EMXV+1/pWu",
	"tVj9wL8QQLteHr0rQ7hFx+7J3qNhz+fDXk6i3ifC4adaOczE6k8xDGeQzsH4X8fv7eYjpsRu17hVntB9",
	"8OjW+KlGTzFMwwsusOv2gwSDD1B7dM+FsAVoguTrIHbq/N8DZ1R6b6SOJMs1/cpDWliPBjLlq1I2EPaO",
	"cl1efX8B50QYa9Lz9ax5yfCckvI5ZEpEVW9Klf6Czdlc2h1wjw3k1oHHtHYsda1ro1IZNo+8fru8uuiW",
	"5DbwRhFqf9Y1l9wFFvL2Zxew+0M6JxteM3Nvs6m339GpXGEWqA23byF3Vg/J2lX7mcU9UWrnPRlJtsV4",
	"wKghIqeK5iJcFvTFLi1zFnPItZW2CyCCJEJd0UTbGr2XMWXfZJniR1mCMq2kgp2NrSnQcmTeoa9LilBl",
	"gpuv0xR9hBZ/FEgFuqntB+mh+yqvS3G0ubG2RGkeA/9QvB7+F4L5kEVyLGAMuztuTqeD9nJPDj0tNmRf",
	"ZrhyPR2mqP6LY/VV+uZLz+5DI3jiDI/S5onK74US73Fj/vS6eRLvp8HyRm4Pkf7x7jaMFGmsabSteW5K",
	"AllVZTdY4EFR0Uf59UZ6zEDWVKChfviQopJd3hhr4A3buHl3KxKxQ+dbV8vZYrbgwtkKjayUWInr2WJ2",
	"zelKKkKm86OfeRAV/7fFqA7JKdyhDxxSRpGSw1pyTqGXjAOdwftC+cE+XXvqj6+wwdy6cWObiRBxu2AU",
	"psdywTC0+IYsrhaLIHtrCE0IflDP+UdvTX/Q56f/O8zFSvxv3t8E5t01YH7+DhBQHVflrqeVO3MhmF4F",
	"9qHday1d0yYHwSH06fGOATKhVhx3ZWMt8q7eaEW9zhmKSJfsoPCEFShudS2PDxBMZuMUh4gARSsI9PSj",
	"zZoXA+GRCbEfi5BcjfsvSIfHms7jhJj2GdiFQ1cn4TENgp84ERgZPz/cSM7zYD29s4Ay7XWg8YR6Buu2",
	"bn7UD62uSgzxdXPplDgTIgwPX1+IAbEL2ytDHz1iRjD/MDlVdse+McJHeH7DBwiV2+/3+38CAAD//714",
	"s9eOEAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
