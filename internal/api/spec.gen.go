// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYT4/bthP9KgR/P6AX1X9226CrW5oghdGiWGyS5hDkQEsji1mRVMiRN8bC370YUrYk",
	"i7Z3CydA0ZtlUhzOvDfzZvTIM6Nqo0Gj4+kjd1kJSvifvwG+kdbhq1JUFegV3IGrjXZAizm4zMoapdE8",
	"5bsVlhmNQmqpVwxLYAW9z7LdASwHFLJyPOG1NTVYlOBN7XeMj35XQu8AhzacLZBpgNwxNGwJzJlqDTlP",
	"uBJf/wC9wpKnL35KuJK6/4ibGnjKwyl8m/BcFoXMmgo3Y8uv92usgjVUzBTeqe6yCS+MVQJ5yqXG66tg",
	"X6pG8fTm5ubG2w+P871xqRFWYMk6mnvQZPj4reejS28TbuFLIy3kPP3I+7fpebM7/NP+fbP8DBmS2TtY",
	"SYdg3zuwd/ClAYcxSP0Cxde2+5lgGh5Y48CeRrDnzvWLgTv0eBEQAuAXxELL7F4LFWEghekHx7LSONAs",
	"l66uxIb5vQO+za9+OQNdwrXR2RGSO1M19EgRP6TZc/iR8LpZVjL7HTZHfQk72D1sWGEsc5A1lpJXqUbL",
	"TPjNA6s/z6/OmkWx8lSQCModNU0ht55YtP3ZAVTi6yKcP5/tl4W1YkOrRM1FPrb9F1hZSMg9d9niNSus",
	"Uf2y0sb+maE+SMXWejLIyYB4j199fA5TlkJyPmPPVmFRULZ6X0PuWg8pE4igahwlrwLnRKz4vsxzST9F",
	"xaQO+eXPWZoGPUkHx1twTYUR4oxQdE2WgYuQ5EMJWIIdn/0gHGvfKpqK789cGlOB0KfA3wWvg/9CMO+8",
	"SPYBjGH3lirVoZCeL7q+wMVE9DLiSfG0kIH8F8rmdymil9bmXR14okZHWfPExO/yJF7i/uP06erEPyjn",
	"vavHYPsgJL4x9lUp8AlwSZ17tdUrcg+ZcE6utAI9LtE1gL09ruu3naC38QpnhRYJGb1+VtF1U1ViWQFP",
	"0TYQK9sosIlU7bf+/x5SB66AJjA+8t2deMIfhCS/e0E8gkJrMzmIwDj49CKJVETFbhe+zRHa6I0yjWuv",
	"WNdV2+ywB4llR7Efl8JBzkSDJWjsGiKUSNHhL7XRjDBmL28XPOFrsC6Ymk9mkxmFytSgRS15yq8ns8k1",
	"3V9g6WM33duZ+tJO/60gqgZoJazB+bBKLVGKfkqTT17RhhedsHeldL19qnHYDUlsCYWxQ3mdcH/j8EC5",
	"MR7+OMESeOu9uJrNfPUwGgnk9JH34jn97Izuxkn69X8LBU/5/6bdvDlth83p8UnTo3pAtq662SNj53jg",
	"3PqmQylhN8E55g2yzj3a0UPGx8onnokJ9dtmqSR2ckNQRLS6hcIh1ExSxQy83kEw6tDGOER0gIcEAYe/",
	"mnxzMRBO9CnbYVJSddh+Qzqc0r7ThBjLHVv71r9N4SENvJ04EQgZN90Nvsd5cDcejZnUYULdOAQ1YXch",
	"bm4gy0bVFfj7tUXzkDgjIvRHgG/EgNh3ge8MfXTQiWD+fjTbtMPHEOE9PH/CA/OR66FLEkRFfPoYlH57",
	"tBCTqgcFCcoRvjntFbbtNemUNuFB57WRGinpGxe2ZCVk90wWu0OkY2ItpFfcMdy9RsJrhxUKEKzj6cdY",
	"l7Z4vSOSp2Crrr07cxJHnnoVom7Uf+noWpwhwkkPrWd9y9l++obciPVWT9SHE43WkDB7pH3gt9vt9u8A",
	"AAD///jcpDMhFQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
